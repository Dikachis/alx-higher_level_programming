From the ``4-print_square`` Module
==================================

Using ``print_square`` function
===============================

Usage:
======

::

Importing the ``print_square`` function from the module

    >>> print_square = __import__('4-print_square').print_square

Begin Tests.

::

Test if size is an integer:

    >>> print_square("Hi")
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square((1,1))
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

::

Test if size is a positive integer:

    >>> print_square(-2)
    Traceback (most recent call last):
        ...
    ValueError: size must be >= 0

    >>> print_square(-1000)
    Traceback (most recent call last):
        ...
    ValueError: size must be >= 0

::

Test if the function works normally:

    >>> print_square(4)
    ####
    ####
    ####
    ####

    >>> print_square(1)
    #

::

checking for module docstring
::
        >>> Mdocs = __import__("4-print_square").__doc__
        >>> len(Mdocs) > 5
        True

checking function docstring for module
::
        >>> Fdocs = print_square.__doc__
        >>> len(Fdocs) > 5
        True

checking if a positive size is passed as a parameter
::
        >>> print_square(1)
        #
        >>> print_square(5)
        #####
        #####
        #####
        #####
        #####

checking when size passed is zero
::
        >>> print_square(0)

checking when size passed is negative:
::
        >>> print_square(-3)
        Traceback (most recent call last):
        ...
        ValueError: size must be >= 0

checking when wrong type is passed
::
        >>> print_square(3.4)
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer
        >>> print_square(-1.5)
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer
        >>> print_square([1, 3])
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer
        >>> print_square({1})
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer
        >>> print_square(None)
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer
        >>> print_square(True)
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer

checking when more than required argument is provided
::
        >>> print_square(3, 4)
        Traceback (most recent call last):
        TypeError: print_square() takes 1 positional argument but 2 were given

check when no argument is provided
::
        >>> print_square()
        Traceback (most recent call last):
        TypeError: print_square() missing 1 required positional argument: 'size'

::

END.
===