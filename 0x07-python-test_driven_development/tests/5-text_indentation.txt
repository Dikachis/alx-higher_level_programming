From ``5-text_indentation`` module
==================================

Using ``text_indentation`` function
===================================

Usage:
======

::

Importing ``text_indentation`` from the module

    >>> text_indentation = __import__('5-text_indentation').text_indentation

Begin tests.

::

Test if text is not a string:

    >>> text_indentation(20)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

    >>> text_indentation(["let's", "go"])
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

::

Test if function works well:

    >>> text_indentation("this is: a text. to test right ?")
    this is:
    <BLANKLINE>
    a text.
    <BLANKLINE>
    to test right ?
    <BLANKLINE>

::

checking for module docstring
::
        >>> Mdocs = __import__("5-text_indentation").__doc__
        >>> len(Mdocs) > 5
        True

checking function docstring for module
::
        >>> Fdocs = text_indentation.__doc__
        >>> len(Fdocs) > 5
        True

checking regular implementation of text_indentation function
::
    >>> text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
    ... Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? \
    ... Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: \
    ... Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. \
    ... Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum \
    ... rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo \
    ... stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum \
    ... cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio \
    ... beatiorem! Iam ruinas videres""")
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    <BLANKLINE>
    Quonam modo?
    <BLANKLINE>
    Utrum igitur tibi litteram videor an totas paginas commovere?
    <BLANKLINE>
    Non autem hoc:
    <BLANKLINE>
    igitur ne illud quidem.
    <BLANKLINE>
    Fortasse id optimum, sed ubi illud:
    <BLANKLINE>
    Plus semper voluptatis?
    <BLANKLINE>
    Teneo, inquit, finem illi videri nihil dolere.
    <BLANKLINE>
    Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
    <BLANKLINE>
    Si id dicis, vicimus.
    <BLANKLINE>
    Inde sermone vario sex illa a Dipylo stadia confecimus.
    <BLANKLINE>
    Sin aliud quid voles, postea.
    <BLANKLINE>
    Quae animi affectio suum cuique tribuens atque hanc, quam dico.
    <BLANKLINE>
    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

    >>> text = "   Hello.  How are you?   "
    >>> text_indentation(text)
    Hello.
    <BLANKLINE>
    How are you?
    <BLANKLINE>

    >>> text_indentation(" . ? : ")
    .
    <BLANKLINE>
    ?
    <BLANKLINE>
    :
    <BLANKLINE>

    >>> text_indentation("Hello")
    Hello

    >>> text_indentation(" \n Hello. Whatcha up to?")
    <BLANKLINE>
     Hello.
    <BLANKLINE>
    Whatcha up to?
    <BLANKLINE>

            >>> text_indentation("Hello, how are you?\n")
            Hello, how are you?
            <BLANKLINE>
            <BLANKLINE>

    checking when wrong type is passed
    ::
    >>> text_indentation(340)
    Traceback (most recent call last):
    ...
    TypeError: text must be a string
    >>> text_indentation(["sarah ?"])
    Traceback (most recent call last):
    ...
    TypeError: text must be a string
    >>> text_indentation(("Hello", 30))
    Traceback (most recent call last):
    ...
    TypeError: text must be a string

cheacking when None is passed
::
    >>> text_indentation(None)
    Traceback (most recent call last):
    ...
    TypeError: text must be a string

    checking when no arguement is passed

::
    >>> text_indentation()
    Traceback (most recent call last):
    ...
    TypeError: text_indentation() missing 1 required positional argument: 'text'

checking when more than required arguement is passed
::

    >>> text_indentation("hello", "world")
    Traceback (most recent call last):
    ...
    TypeError: text_indentation() takes 1 positional argument but 2 were given

::
END.
===
